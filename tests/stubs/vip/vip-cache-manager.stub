<?php

class WPCOM_VIP_Cache_Manager
{
    const MAX_PURGE_URLS = 100;
    const MAX_PURGE_BATCH_URLS = 4000;
    const MAX_BAN_URLS = 10;
    const CACHE_PURGE_BATCH_SIZE = 2000;
    public static function instance()
    {
    }
    public function __construct()
    {
    }
    public function init()
    {
    }
    public function get_queued_purge_urls()
    {
    }
    public function clear_queued_purge_urls()
    {
    }
    /**
     * Display a button to purge the cache for the specific URL and its assets
     *
     * @return void
     */
    public function admin_bar_callback(\WP_Admin_Bar $admin_bar)
    {
    }
    /**
     * Enqueue the button for users who have the needed caps.
     *
     * @return void
     */
    public function button_enqueue_scripts()
    {
    }
    /**
     * AJAX callback that performs basic security checks and payload validation and queues urls for the purge.
     *
     * @return void
     */
    public function ajax_vip_purge_page_cache()
    {
    }
    public function get_manual_purge_link()
    {
    }
    public function manual_purge_message()
    {
    }
    public function curl_multi($requests)
    {
    }
    /**
     * Instead of using this method directly, please use the API
     * functions provided; see `api.php`.
     *
     * @access private Please do not use this method directly
     * @param string $url A URL to PURGE
     * @param string $method
     *
     * @return array
     */
    public function build_purge_request($url, $method)
    {
    }
    public function execute_purges()
    {
    }
    public function purge_site_cache()
    {
    }
    public function queue_post_purge($post_id)
    {
    }
    /**
     * Purge the cache for a terms
     *
     * @param object|int $term A WP Term object, or a term ID
     * @return bool True on success
     */
    public function queue_term_purge($term)
    {
    }
    /**
     * Purge the cache for some terms
     *
     * Hooks the `clean_term_cache` action
     *
     * We do not respect requests to clear caches for the entire taxonomy,
     * as this would be potentially hundreds or thousands of PURGE requests.
     *
     * @param array  $ids            An array of term IDs.
     * @param string $taxonomy       Taxonomy slug.
     * @param bool   $clean_taxonomy Whether or not to clean taxonomy-wide caches
     */
    public function queue_terms_purges($ids, $taxonomy)
    {
    }
    /**
     * Get all URLs to be purged for a given term
     *
     * @param object $term A WP term object
     *
     * @return array An array of URLs to be purged
     */
    protected function get_purge_urls_for_term($term)
    {
    }
    /**
     * PURGE a single URL
     *
     * @param string $url The specific URL to purge the cache for
     *
     * @return bool True on success
     */
    public function queue_purge_url($url)
    {
    }
    /**
     * Schedule purge of old permalink in case it was changed during post update
     * and only if the post's status was publish before the update
     *
     * @param int $post_ID The post ID of update post
     * @param WP_Post $post_after The post object as it looks after the update
     * @param WP_Post $post_before The post object as it looked before the update
     *
     * @return void
     */
    public function queue_old_permalink_purge($post_ID, $post_after, $post_before)
    {
    }
    protected function normalize_purge_url($url)
    {
    }
    protected function is_valid_purge_url($url)
    {
    }
}