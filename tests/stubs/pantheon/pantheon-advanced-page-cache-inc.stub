<?php

namespace Pantheon_Advanced_Page_Cache;

/**
 * Controller for a variety of admin UI.
 */
class User_Interface
{
    /**
     * Register a toolbar button to purge the cache for the current page.
     *
     * @param object $wp_admin_bar Instance of WP_Admin_Bar.
     */
    public static function action_admin_bar_menu($wp_admin_bar)
    {
    }
    /**
     * Handle an admin-ajax request to clear the URL cache.
     */
    public static function handle_ajax_clear_url_cache()
    {
    }
}
/**
 * Manage the Pantheon Advanced Page Cache.
 */
class CLI
{
    /**
     * Purge one or more surrogate keys from cache.
     *
     * ## OPTIONS
     *
     * <key>...
     * : One or more surrogate keys.
     *
     * ## EXAMPLES
     *
     *     # Purge the 'post-1' surrogate key from cache.
     *     $ wp pantheon cache purge-key post-1
     *     Success: Purged key.
     *
     * @subcommand purge-key
     */
    public function purge_key($args)
    {
    }
    /**
     * Purge one or more paths from cache.
     *
     * ## OPTIONS
     *
     * <key>...
     * : One or more paths.
     *
     * ## EXAMPLES
     *
     *     # Purge the homepage from cache.
     *     $ wp pantheon cache purge-path '/'
     *     Success: Purged path.
     *
     * @subcommand purge-path
     */
    public function purge_path($args)
    {
    }
    /**
     * Purge the entire page cache.
     *
     * WARNING! Purging the entire page cache can have a severe performance
     * impact on a high-traffic site. We encourage you to explore other options
     * first.
     *
     * ## OPTIONS
     *
     * [--yes]
     * : Answer yes to the confirmation message.
     *
     * ## EXAMPLES
     *
     *     # Purging the entire page cache will display a confirmation prompt.
     *     $ wp pantheon cache purge-all
     *     Are you sure you want to purge the entire page cache? [y/n] y
     *     Success: Purged page cache.
     *
     * @subcommand purge-all
     */
    public function purge_all($_, $assoc_args)
    {
    }
}
/**
 * Purges the appropriate surrogate key based on the event.
 */
class Purger
{
    /**
     * Purge surrogate keys associated with a post being updated.
     *
     * @param integer $post_id ID for the modified post.
     * @param object  $post    The post object.
     */
    public static function action_wp_insert_post($post_id, $post)
    {
    }
    /**
     * Purge surrogate keys associated with a post being published or unpublished.
     *
     * @param string  $new_status New status for the post.
     * @param string  $old_status Old status for the post.
     * @param WP_Post $post Post object.
     */
    public static function action_transition_post_status($new_status, $old_status, $post)
    {
    }
    /**
     * Purge surrogate keys associated with a post being deleted.
     *
     * @param integer $post_id ID for the post to be deleted.
     */
    public static function action_before_delete_post($post_id)
    {
    }
    /**
     * Purge surrogate keys associated with an attachment being deleted.
     *
     * @param integer $post_id ID for the modified attachment.
     */
    public static function action_delete_attachment($post_id)
    {
    }
    /**
     * Purge the post's surrogate key when the post cache is cleared.
     *
     * @param integer $post_id ID for the modified post.
     */
    public static function action_clean_post_cache($post_id)
    {
    }
    /**
     * Purge surrogate keys associated with a term being created.
     *
     * @param integer $term_id  ID for the created term.
     * @param int     $tt_id    Term taxonomy ID.
     * @param string  $taxonomy Taxonomy slug.
     */
    public static function action_created_term($term_id, $tt_id, $taxonomy)
    {
    }
    /**
     * Purge surrogate keys associated with a term being edited.
     *
     * @param integer $term_id ID for the edited term.
     */
    public static function action_edited_term($term_id)
    {
    }
    /**
     * Purge surrogate keys associated with a term being deleted.
     *
     * @param integer $term_id ID for the deleted term.
     */
    public static function action_delete_term($term_id)
    {
    }
    /**
     * Purge the term's archive surrogate key when the term is modified.
     *
     * @param integer $term_ids One or more IDs of modified terms.
     */
    public static function action_clean_term_cache($term_ids)
    {
    }
    /**
     * Purge surrogate keys when an approved comment is updated.
     *
     * @param integer    $id      The comment ID.
     * @param WP_Comment $comment Comment object.
     */
    public static function action_wp_insert_comment($id, $comment)
    {
    }
    /**
     * Purge surrogate keys when a comment is approved or unapproved.
     *
     * @param int|string $new_status The new comment status.
     * @param int|string $old_status The old comment status.
     * @param object     $comment    The comment data.
     */
    public static function action_transition_comment_status($new_status, $old_status, $comment)
    {
    }
    /**
     * Purge the comment's surrogate key when the comment is modified.
     *
     * @param integer $comment_id Modified comment id.
     */
    public static function action_clean_comment_cache($comment_id)
    {
    }
    /**
     * Purge a variety of surrogate keys when a user is modified.
     *
     * @param integer $user_id ID for the modified user.
     */
    public static function action_clean_user_cache($user_id)
    {
    }
    /**
     * Purge a variety of surrogate keys when an option is modified.
     *
     * @param string $option Name of the updated option.
     */
    public static function action_updated_option($option)
    {
    }
}
/**
 * Generates and emits surrogate keys based on the current request.
 */
class Emitter
{
    /**
     * Header key.
     *
     * @var string
     */
    const HEADER_KEY = 'Surrogate-Key';
    /**
     * Maximum header length.
     *
     * @var integer
     */
    const HEADER_MAX_LENGTH = 32512;
    /**
     * Render surrogate keys after the main query has run
     */
    public static function action_wp()
    {
    }
    /**
     * Register filters to sniff surrogate keys out of REST API responses.
     */
    public static function action_rest_api_init()
    {
    }
    /**
     * Reset surrogate keys before a REST API response is generated.
     *
     * @param mixed           $result  Response to replace the requested version with.
     * @param WP_REST_Server  $server  Server instance.
     * @param WP_REST_Request $request Request used to generate the response.
     */
    public static function filter_rest_pre_dispatch($result, $server, $request)
    {
    }
    /**
     * Render surrogate keys after a REST API response is prepared
     *
     * @param WP_HTTP_Response $result  Result to send to the client. Usually a WP_REST_Response.
     * @param WP_REST_Server   $server  Server instance.
     */
    public static function filter_rest_post_dispatch($result, $server)
    {
    }
    /**
     * Determine which posts are present in a REST API response.
     *
     * @param WP_REST_Response $response The response object.
     * @param WP_Post          $post     Post object.
     * @param WP_REST_Request  $request  Request object.
     */
    public static function filter_rest_prepare_post($response, $post, $request)
    {
    }
    /**
     * Determine which terms are present in a REST API response.
     *
     * @param WP_REST_Response $response The response object.
     * @param WP_Post          $term     Term object.
     * @param WP_REST_Request  $request  Request object.
     */
    public static function filter_rest_prepare_term($response, $term, $request)
    {
    }
    /**
     * Determine which comments are present in a REST API response.
     *
     * @param WP_REST_Response $response The response object.
     * @param WP_Comment       $comment  The original comment object.
     * @param WP_REST_Request  $request  Request used to generate the response.
     */
    public static function filter_rest_prepare_comment($response, $comment, $request)
    {
    }
    /**
     * Determine which users are present in a REST API response.
     *
     * @param WP_REST_Response $response The response object.
     * @param WP_Post          $user     User object.
     * @param WP_REST_Request  $request  Request object.
     */
    public static function filter_rest_prepare_user($response, $user, $request)
    {
    }
    /**
     * Determine which settings are present in a REST API request
     *
     * @param mixed  $result Value to use for the requested setting. Can be a scalar
     *                       matching the registered schema for the setting, or null to
     *                       follow the default get_option() behavior.
     * @param string $name   Setting name (as shown in REST API responses).
     */
    public static function filter_rest_pre_get_setting($result, $name)
    {
    }
    /**
     * Get the surrogate keys to be included in this view.
     *
     * Surrogate keys are generated based on the main WP_Query.
     *
     * @return array
     */
    public static function get_main_query_surrogate_keys()
    {
    }
    /**
     * Get the surrogate keys to be included in this view.
     *
     * Surrogate keys are generated based on filters added to REST API controllers.
     *
     * @return array
     */
    public static function get_rest_api_surrogate_keys()
    {
    }
    /**
     * Reset surrogate keys stored on the instance.
     */
    public static function reset_rest_api_surrogate_keys()
    {
    }
    /**
     * Filter the surrogate keys to ensure that the length doesn't exceed what nginx can handle.
     *
     * @param array $keys Existing surrogate keys generated by the plugin.
     *
     * @return array
     */
    public static function filter_huge_surrogate_keys_list($keys)
    {
    }
    /**
     * Inspect the model and get the right surrogate keys.
     *
     * @param WPGraphQL\Model\Model|mixed $model Model object, array, etc.
     */
    public static function filter_graphql_dataloader_get_model($model)
    {
    }
    /**
     * Get the surrogate keys to be included in this view.
     *
     * Surrogate keys are generated based on filters added to GraphQL controllers.
     *
     * @return array
     */
    public static function get_graphql_surrogate_keys()
    {
    }
    /**
     * Send additional headers to graphql response.
     *
     * @param array $headers Existing headers as set by graphql plugin.
     */
    public static function filter_graphql_response_headers_to_send($headers)
    {
    }
}